{
  "metadata": {
    "generatedAt": "2025-08-30T00:05:06.895Z",
    "generator": "openapi-mcp-server/tool-schema-generator",
    "version": "1.6.4",
    "totalServices": 3,
    "totalTools": 141
  },
  "services": {
    "n8n": {
      "service": "n8n",
      "description": "n8n workflow automation platform",
      "category": "workflow-automation",
      "authentication": {
        "required": [
          "N8N_API_KEY",
          "N8N_API_URL"
        ],
        "type": "apikey"
      },
      "tools": [
        {
          "name": "generateAudit",
          "description": "Generate an audit",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "additionalOptions": {
                    "type": "object",
                    "properties": {
                      "daysAbandonedWorkflow": {
                        "type": "integer",
                        "description": "Days for a workflow to be considered abandoned if not executed"
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "credentials",
                            "database",
                            "nodes",
                            "filesystem",
                            "instance"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/audit",
          "category": "other",
          "tags": [
            "audit"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using generateAudit",
              "input": {
                "body": {
                  "additionalOptions": {
                    "daysAbandonedWorkflow": 1,
                    "categories": [
                      "credentials"
                    ]
                  }
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "createCredential",
          "description": "Create a credential",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "R2DjclaysHbqn778"
                  },
                  "name": {
                    "type": "string",
                    "example": "Joe's Github Credentials"
                  },
                  "type": {
                    "type": "string",
                    "example": "github"
                  },
                  "data": {
                    "type": "object",
                    "example": {
                      "token": "ada612vad6fa5df4adf5a5dsf4389adsf76da7s"
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "example": "2022-04-29T11:02:29.842Z",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "example": "2022-04-29T11:02:29.842Z",
                    "format": "date-time"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "data"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/credentials",
          "category": "create",
          "tags": [
            "credentials"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createCredential",
              "input": {
                "body": {
                  "id": "example",
                  "name": "example",
                  "type": "example",
                  "data": {},
                  "createdAt": "example",
                  "updatedAt": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteCredential",
          "description": "Delete credential by ID",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The credential ID that needs to be deleted"
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/credentials/{id}",
          "category": "delete",
          "tags": [
            "credentials"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteCredential",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getCredentialType",
          "description": "Show credential data schema",
          "inputSchema": {
            "type": "object",
            "properties": {
              "credentialTypeName": {
                "type": "string",
                "description": "The credential type name that you want to get the schema for"
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "credentialTypeName"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/credentials/schema/{credentialTypeName}",
          "category": "list",
          "tags": [
            "credentials",
            "schema"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getCredentialType",
              "input": {
                "credentialTypeName": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getExecutions",
          "description": "Retrieve all executions",
          "inputSchema": {
            "type": "object",
            "properties": {
              "includeData": {
                "type": "boolean",
                "description": "Whether or not to include the execution's detailed data."
              },
              "status": {
                "type": "string",
                "description": "Status to filter the executions by.",
                "enum": [
                  "error",
                  "success",
                  "waiting"
                ]
              },
              "workflowId": {
                "type": "string",
                "description": "Workflow to filter the executions by.",
                "example": "1000"
              },
              "projectId": {
                "type": "string",
                "example": "VmwOO9HeTEj20kxM"
              },
              "limit": {
                "type": "number",
                "description": "The maximum number of items to return.",
                "example": 100,
                "maximum": 250,
                "default": 100
              },
              "cursor": {
                "type": "string",
                "description": "Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first \"page\" of the collection. See pagination for more detail."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/executions",
          "category": "list",
          "tags": [
            "executions"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getExecutions",
              "input": {
                "includeData": true,
                "status": "error",
                "workflowId": "1000",
                "projectId": "VmwOO9HeTEj20kxM",
                "limit": 100,
                "cursor": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getExecution",
          "description": "Retrieve an execution",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "The ID of the execution."
              },
              "includeData": {
                "type": "boolean",
                "description": "Whether or not to include the execution's detailed data."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/executions/{id}",
          "category": "list",
          "tags": [
            "executions"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getExecution",
              "input": {
                "id": 1,
                "includeData": true,
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteExecution",
          "description": "Delete an execution",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "The ID of the execution."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/executions/{id}",
          "category": "delete",
          "tags": [
            "executions"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteExecution",
              "input": {
                "id": 1,
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "createTag",
          "description": "Create a tag",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "2tUt1wbLX592XDdX"
                  },
                  "name": {
                    "type": "string",
                    "example": "Production"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/tags",
          "category": "create",
          "tags": [
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createTag",
              "input": {
                "body": {
                  "id": "example",
                  "name": "example",
                  "createdAt": "example",
                  "updatedAt": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getTags",
          "description": "Retrieve all tags",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "description": "The maximum number of items to return.",
                "example": 100,
                "maximum": 250,
                "default": 100
              },
              "cursor": {
                "type": "string",
                "description": "Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first \"page\" of the collection. See pagination for more detail."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/tags",
          "category": "list",
          "tags": [
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getTags",
              "input": {
                "limit": 100,
                "cursor": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getTag",
          "description": "Retrieves a tag",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the tag."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/tags/{id}",
          "category": "list",
          "tags": [
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getTag",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteTag",
          "description": "Delete a tag",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the tag."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/tags/{id}",
          "category": "delete",
          "tags": [
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteTag",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "updateTag",
          "description": "Update a tag",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the tag."
              },
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "2tUt1wbLX592XDdX"
                  },
                  "name": {
                    "type": "string",
                    "example": "Production"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/tags/{id}",
          "category": "update",
          "tags": [
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using updateTag",
              "input": {
                "id": "example",
                "body": {
                  "id": "example",
                  "name": "example",
                  "createdAt": "example",
                  "updatedAt": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "createWorkflow",
          "description": "Create a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "2tUt1wbLX592XDdX"
                  },
                  "name": {
                    "type": "string",
                    "example": "Workflow 1"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "0f5532f9-36ba-4bef-86c7-30d607400b15"
                        },
                        "name": {
                          "type": "string",
                          "example": "Jira"
                        },
                        "webhookId": {
                          "type": "string"
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "notesInFlow": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "example": "n8n-nodes-base.Jira"
                        },
                        "typeVersion": {
                          "type": "number",
                          "example": 1
                        },
                        "executeOnce": {
                          "type": "boolean"
                        },
                        "alwaysOutputData": {
                          "type": "boolean"
                        },
                        "retryOnFail": {
                          "type": "boolean"
                        },
                        "maxTries": {
                          "type": "number"
                        },
                        "waitBetweenTries": {
                          "type": "number"
                        },
                        "continueOnFail": {
                          "type": "boolean",
                          "description": "use onError instead"
                        },
                        "onError": {
                          "type": "string",
                          "example": "stopWorkflow"
                        },
                        "position": {
                          "type": "array",
                          "example": [
                            -100,
                            80
                          ],
                          "items": {
                            "type": "number"
                          }
                        },
                        "parameters": {
                          "type": "object",
                          "example": {
                            "additionalProperties": {}
                          }
                        },
                        "credentials": {
                          "type": "object",
                          "example": {
                            "jiraSoftwareCloudApi": {
                              "id": "35",
                              "name": "jiraApi"
                            }
                          }
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  },
                  "connections": {
                    "type": "object",
                    "example": {
                      "main": [
                        {
                          "node": "Jira",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    }
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "saveExecutionProgress": {
                        "type": "boolean"
                      },
                      "saveManualExecutions": {
                        "type": "boolean"
                      },
                      "saveDataErrorExecution": {
                        "type": "string",
                        "enum": [
                          "all",
                          "none"
                        ]
                      },
                      "saveDataSuccessExecution": {
                        "type": "string",
                        "enum": [
                          "all",
                          "none"
                        ]
                      },
                      "executionTimeout": {
                        "type": "number",
                        "example": 3600,
                        "maxLength": 3600
                      },
                      "errorWorkflow": {
                        "type": "string",
                        "description": "The ID of the workflow that contains the error trigger node.",
                        "example": "VzqKEW0ShTXA5vPj"
                      },
                      "timezone": {
                        "type": "string",
                        "example": "America/New_York"
                      },
                      "executionOrder": {
                        "type": "string",
                        "example": "v1"
                      }
                    }
                  },
                  "staticData": {
                    "type": "string",
                    "example": {
                      "lastId": 1
                    }
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "2tUt1wbLX592XDdX"
                        },
                        "name": {
                          "type": "string",
                          "example": "Production"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "nodes",
                  "connections",
                  "settings"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/workflows",
          "category": "create",
          "tags": [
            "workflows"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createWorkflow",
              "input": {
                "body": {
                  "id": "example",
                  "name": "example",
                  "active": true,
                  "createdAt": "example",
                  "updatedAt": "example",
                  "nodes": [
                    {
                      "id": "example",
                      "name": "example",
                      "webhookId": "example",
                      "disabled": true,
                      "notesInFlow": true,
                      "notes": "example",
                      "type": "example",
                      "typeVersion": 1,
                      "executeOnce": true,
                      "alwaysOutputData": true,
                      "retryOnFail": true,
                      "maxTries": 1,
                      "waitBetweenTries": 1,
                      "continueOnFail": true,
                      "onError": "example",
                      "position": [
                        1
                      ],
                      "parameters": {},
                      "credentials": {},
                      "createdAt": "example",
                      "updatedAt": "example"
                    }
                  ],
                  "connections": {},
                  "settings": {
                    "saveExecutionProgress": true,
                    "saveManualExecutions": true,
                    "saveDataErrorExecution": "all",
                    "saveDataSuccessExecution": "all",
                    "executionTimeout": 1,
                    "errorWorkflow": "example",
                    "timezone": "example",
                    "executionOrder": "example"
                  },
                  "staticData": null,
                  "tags": [
                    {
                      "id": "example",
                      "name": "example",
                      "createdAt": "example",
                      "updatedAt": "example"
                    }
                  ]
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getWorkflows",
          "description": "Retrieve all workflows",
          "inputSchema": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "example": true
              },
              "tags": {
                "type": "string",
                "example": "test,production"
              },
              "name": {
                "type": "string",
                "example": "My Workflow"
              },
              "projectId": {
                "type": "string",
                "example": "VmwOO9HeTEj20kxM"
              },
              "excludePinnedData": {
                "type": "boolean",
                "description": "Set this to avoid retrieving pinned data",
                "example": true
              },
              "limit": {
                "type": "number",
                "description": "The maximum number of items to return.",
                "example": 100,
                "maximum": 250,
                "default": 100
              },
              "cursor": {
                "type": "string",
                "description": "Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first \"page\" of the collection. See pagination for more detail."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/workflows",
          "category": "list",
          "tags": [
            "workflows"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getWorkflows",
              "input": {
                "active": true,
                "tags": "test,production",
                "name": "My Workflow",
                "projectId": "VmwOO9HeTEj20kxM",
                "excludePinnedData": true,
                "limit": 100,
                "cursor": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getWorkflow",
          "description": "Retrieves a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "excludePinnedData": {
                "type": "boolean",
                "description": "Set this to avoid retrieving pinned data",
                "example": true
              },
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/workflows/{id}",
          "category": "list",
          "tags": [
            "workflows"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getWorkflow",
              "input": {
                "excludePinnedData": true,
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteWorkflow",
          "description": "Delete a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/workflows/{id}",
          "category": "delete",
          "tags": [
            "workflows"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteWorkflow",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "updateWorkflow",
          "description": "Update a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "2tUt1wbLX592XDdX"
                  },
                  "name": {
                    "type": "string",
                    "example": "Workflow 1"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "0f5532f9-36ba-4bef-86c7-30d607400b15"
                        },
                        "name": {
                          "type": "string",
                          "example": "Jira"
                        },
                        "webhookId": {
                          "type": "string"
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "notesInFlow": {
                          "type": "boolean"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "example": "n8n-nodes-base.Jira"
                        },
                        "typeVersion": {
                          "type": "number",
                          "example": 1
                        },
                        "executeOnce": {
                          "type": "boolean"
                        },
                        "alwaysOutputData": {
                          "type": "boolean"
                        },
                        "retryOnFail": {
                          "type": "boolean"
                        },
                        "maxTries": {
                          "type": "number"
                        },
                        "waitBetweenTries": {
                          "type": "number"
                        },
                        "continueOnFail": {
                          "type": "boolean",
                          "description": "use onError instead"
                        },
                        "onError": {
                          "type": "string",
                          "example": "stopWorkflow"
                        },
                        "position": {
                          "type": "array",
                          "example": [
                            -100,
                            80
                          ],
                          "items": {
                            "type": "number"
                          }
                        },
                        "parameters": {
                          "type": "object",
                          "example": {
                            "additionalProperties": {}
                          }
                        },
                        "credentials": {
                          "type": "object",
                          "example": {
                            "jiraSoftwareCloudApi": {
                              "id": "35",
                              "name": "jiraApi"
                            }
                          }
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  },
                  "connections": {
                    "type": "object",
                    "example": {
                      "main": [
                        {
                          "node": "Jira",
                          "type": "main",
                          "index": 0
                        }
                      ]
                    }
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "saveExecutionProgress": {
                        "type": "boolean"
                      },
                      "saveManualExecutions": {
                        "type": "boolean"
                      },
                      "saveDataErrorExecution": {
                        "type": "string",
                        "enum": [
                          "all",
                          "none"
                        ]
                      },
                      "saveDataSuccessExecution": {
                        "type": "string",
                        "enum": [
                          "all",
                          "none"
                        ]
                      },
                      "executionTimeout": {
                        "type": "number",
                        "example": 3600,
                        "maxLength": 3600
                      },
                      "errorWorkflow": {
                        "type": "string",
                        "description": "The ID of the workflow that contains the error trigger node.",
                        "example": "VzqKEW0ShTXA5vPj"
                      },
                      "timezone": {
                        "type": "string",
                        "example": "America/New_York"
                      },
                      "executionOrder": {
                        "type": "string",
                        "example": "v1"
                      }
                    }
                  },
                  "staticData": {
                    "type": "string",
                    "example": {
                      "lastId": 1
                    }
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "2tUt1wbLX592XDdX"
                        },
                        "name": {
                          "type": "string",
                          "example": "Production"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "nodes",
                  "connections",
                  "settings"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/workflows/{id}",
          "category": "update",
          "tags": [
            "workflows"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using updateWorkflow",
              "input": {
                "id": "example",
                "body": {
                  "id": "example",
                  "name": "example",
                  "active": true,
                  "createdAt": "example",
                  "updatedAt": "example",
                  "nodes": [
                    {
                      "id": "example",
                      "name": "example",
                      "webhookId": "example",
                      "disabled": true,
                      "notesInFlow": true,
                      "notes": "example",
                      "type": "example",
                      "typeVersion": 1,
                      "executeOnce": true,
                      "alwaysOutputData": true,
                      "retryOnFail": true,
                      "maxTries": 1,
                      "waitBetweenTries": 1,
                      "continueOnFail": true,
                      "onError": "example",
                      "position": [
                        1
                      ],
                      "parameters": {},
                      "credentials": {},
                      "createdAt": "example",
                      "updatedAt": "example"
                    }
                  ],
                  "connections": {},
                  "settings": {
                    "saveExecutionProgress": true,
                    "saveManualExecutions": true,
                    "saveDataErrorExecution": "all",
                    "saveDataSuccessExecution": "all",
                    "executionTimeout": 1,
                    "errorWorkflow": "example",
                    "timezone": "example",
                    "executionOrder": "example"
                  },
                  "staticData": null,
                  "tags": [
                    {
                      "id": "example",
                      "name": "example",
                      "createdAt": "example",
                      "updatedAt": "example"
                    }
                  ]
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "activateWorkflow",
          "description": "Activate a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/workflows/{id}/activate",
          "category": "other",
          "tags": [
            "workflows",
            "activate"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using activateWorkflow",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deactivateWorkflow",
          "description": "Deactivate a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/workflows/{id}/deactivate",
          "category": "other",
          "tags": [
            "workflows",
            "deactivate"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deactivateWorkflow",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "transferWorkflow",
          "description": "Transfer a workflow to another project.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "body": {
                "type": "object",
                "properties": {
                  "destinationProjectId": {
                    "type": "string",
                    "description": "The ID of the project to transfer the workflow to."
                  }
                },
                "required": [
                  "destinationProjectId"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/workflows/{id}/transfer",
          "category": "other",
          "tags": [
            "workflows",
            "transfer"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using transferWorkflow",
              "input": {
                "id": "example",
                "body": {
                  "destinationProjectId": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "transferCredential",
          "description": "Transfer a credential to another project.",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the credential."
              },
              "body": {
                "type": "object",
                "properties": {
                  "destinationProjectId": {
                    "type": "string",
                    "description": "The ID of the project to transfer the credential to."
                  }
                },
                "required": [
                  "destinationProjectId"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/credentials/{id}/transfer",
          "category": "other",
          "tags": [
            "credentials",
            "transfer"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using transferCredential",
              "input": {
                "id": "example",
                "body": {
                  "destinationProjectId": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getWorkflowTags",
          "description": "Get workflow tags",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/workflows/{id}/tags",
          "category": "list",
          "tags": [
            "workflows",
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getWorkflowTags",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "updateWorkflowTags",
          "description": "Update tags of a workflow",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workflow."
              },
              "body": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "2tUt1wbLX592XDdX"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/workflows/{id}/tags",
          "category": "update",
          "tags": [
            "workflows",
            "tags"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using updateWorkflowTags",
              "input": {
                "id": "example",
                "body": [
                  {
                    "id": "example"
                  }
                ],
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getUsers",
          "description": "Retrieve all users",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "description": "The maximum number of items to return.",
                "example": 100,
                "maximum": 250,
                "default": 100
              },
              "cursor": {
                "type": "string",
                "description": "Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first \"page\" of the collection. See pagination for more detail."
              },
              "includeRole": {
                "type": "boolean",
                "description": "Whether to include the user's role or not.",
                "example": true
              },
              "projectId": {
                "type": "string",
                "example": "VmwOO9HeTEj20kxM"
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/users",
          "category": "list",
          "tags": [
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getUsers",
              "input": {
                "limit": 100,
                "cursor": "example",
                "includeRole": true,
                "projectId": "VmwOO9HeTEj20kxM",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "createUser",
          "description": "Create multiple users",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "global:admin",
                        "global:member"
                      ]
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/users",
          "category": "create",
          "tags": [
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createUser",
              "input": {
                "body": [
                  {
                    "email": "user@example.com",
                    "role": "global:admin"
                  }
                ],
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getUser",
          "description": "Get user by ID/Email",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID or email of the user.",
                "format": "identifier"
              },
              "includeRole": {
                "type": "boolean",
                "description": "Whether to include the user's role or not.",
                "example": true
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/users/{id}",
          "category": "list",
          "tags": [
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getUser",
              "input": {
                "id": "example",
                "includeRole": true,
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteUser",
          "description": "Delete a user",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID or email of the user.",
                "format": "identifier"
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/users/{id}",
          "category": "delete",
          "tags": [
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteUser",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "changeRole",
          "description": "Change a user's global role",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID or email of the user.",
                "format": "identifier"
              },
              "body": {
                "type": "object",
                "properties": {
                  "newRoleName": {
                    "type": "string",
                    "enum": [
                      "global:admin",
                      "global:member"
                    ]
                  }
                },
                "required": [
                  "newRoleName"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PATCH",
          "pathTemplate": "/users/{id}/role",
          "category": "other",
          "tags": [
            "users",
            "role"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using changeRole",
              "input": {
                "id": "example",
                "body": {
                  "newRoleName": "global:admin"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "pull",
          "description": "Pull changes from the remote repository",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "example": true
                  },
                  "variables": {
                    "type": "object",
                    "example": {
                      "foo": "bar"
                    }
                  }
                }
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/source-control/pull",
          "category": "other",
          "tags": [
            "source-control",
            "pull"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using pull",
              "input": {
                "body": {
                  "force": true,
                  "variables": {}
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "createVariable",
          "description": "Create a variable",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "example": "test"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/variables",
          "category": "create",
          "tags": [
            "variables"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createVariable",
              "input": {
                "body": {
                  "id": "example",
                  "key": "example",
                  "value": "example",
                  "type": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getVariables",
          "description": "Retrieve variables",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "description": "The maximum number of items to return.",
                "example": 100,
                "maximum": 250,
                "default": 100
              },
              "cursor": {
                "type": "string",
                "description": "Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first \"page\" of the collection. See pagination for more detail."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/variables",
          "category": "list",
          "tags": [
            "variables"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getVariables",
              "input": {
                "limit": 100,
                "cursor": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteVariable",
          "description": "Delete a variable",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the variable."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/variables/{id}",
          "category": "delete",
          "tags": [
            "variables"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteVariable",
              "input": {
                "id": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "updateVariable",
          "description": "Update a variable",
          "inputSchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Path parameter: id"
              },
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "example": "test"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "id",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/variables/{id}",
          "category": "update",
          "tags": [
            "variables"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using updateVariable",
              "input": {
                "id": "example",
                "body": {
                  "id": "example",
                  "key": "example",
                  "value": "example",
                  "type": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "createProject",
          "description": "Create a project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/projects",
          "category": "create",
          "tags": [
            "projects"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createProject",
              "input": {
                "body": {
                  "id": "example",
                  "name": "example",
                  "type": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getProjects",
          "description": "Retrieve projects",
          "inputSchema": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number",
                "description": "The maximum number of items to return.",
                "example": 100,
                "maximum": 250,
                "default": 100
              },
              "cursor": {
                "type": "string",
                "description": "Paginate by setting the cursor parameter to the nextCursor attribute returned by the previous request's response. Default value fetches the first \"page\" of the collection. See pagination for more detail."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": []
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/projects",
          "category": "list",
          "tags": [
            "projects"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getProjects",
              "input": {
                "limit": 100,
                "cursor": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteProject",
          "description": "Delete a project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "The ID of the project."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "projectId"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/projects/{projectId}",
          "category": "delete",
          "tags": [
            "projects"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteProject",
              "input": {
                "projectId": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "updateProject",
          "description": "Update a project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "The ID of the project."
              },
              "body": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "projectId",
              "body"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/projects/{projectId}",
          "category": "update",
          "tags": [
            "projects"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using updateProject",
              "input": {
                "projectId": "example",
                "body": {
                  "id": "example",
                  "name": "example",
                  "type": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "addUsersToProject",
          "description": "Add one or more users to a project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "The ID of the project."
              },
              "body": {
                "type": "object",
                "properties": {
                  "relations": {
                    "type": "array",
                    "description": "A list of userIds and roles to add to the project.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "The unique identifier of the user.",
                          "example": "91765f0d-3b29-45df-adb9-35b23937eb92"
                        },
                        "role": {
                          "type": "string",
                          "description": "The role assigned to the user in the project.",
                          "example": "project:viewer"
                        }
                      },
                      "required": [
                        "userId",
                        "role"
                      ]
                    }
                  }
                },
                "required": [
                  "relations"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "projectId"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/projects/{projectId}/users",
          "category": "create",
          "tags": [
            "projects",
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using addUsersToProject",
              "input": {
                "projectId": "example",
                "body": {
                  "relations": [
                    {
                      "userId": "example",
                      "role": "example"
                    }
                  ]
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "deleteUserFromProject",
          "description": "Delete a user from a project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "The ID of the project."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user."
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "projectId",
              "userId"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/projects/{projectId}/users/{userId}",
          "category": "delete",
          "tags": [
            "projects",
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using deleteUserFromProject",
              "input": {
                "projectId": "example",
                "userId": "example",
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "changeUserRoleInProject",
          "description": "Change a user's role in a project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "projectId": {
                "type": "string",
                "description": "The ID of the project."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user."
              },
              "body": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role assigned to the user in the project.",
                    "example": "project:viewer"
                  }
                },
                "required": [
                  "role"
                ]
              },
              "X-N8N-API-KEY": {
                "type": "string",
                "description": "API Key for ApiKeyAuth"
              }
            },
            "required": [
              "projectId",
              "userId"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PATCH",
          "pathTemplate": "/projects/{projectId}/users/{userId}",
          "category": "other",
          "tags": [
            "projects",
            "users"
          ],
          "security": {
            "required": true,
            "schemes": [
              "apikey"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using changeUserRoleInProject",
              "input": {
                "projectId": "example",
                "userId": "example",
                "body": {
                  "role": "example"
                },
                "X-N8N-API-KEY": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        }
      ],
      "toolCount": 40,
      "generatedAt": "2025-08-30T00:05:06.779Z",
      "version": "1.6.4",
      "examples": [
        {
          "name": "Service Connection",
          "description": "How to connect to n8n",
          "code": "# Environment setup\nN8N_API_KEY=your_n8n_api_key\nN8N_API_URL=your_n8n_api_url\n\n# Start MCP server\nnode examples/mcp-n8n-server.js\n\n# Or use multi-host\nnode examples/mcp-multi-host.js --config services.json"
        },
        {
          "name": "Using generateAudit",
          "description": "Generate an audit",
          "code": "# Call generateAudit\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"n8n.generateAudit\",\n    \"arguments\": {\n  \"body\": {\n    \"additionalOptions\": {\n      \"daysAbandonedWorkflow\": 1,\n      \"categories\": [\n        \"credentials\"\n      ]\n    }\n  },\n  \"X-N8N-API-KEY\": \"example\"\n}\n  }\n}"
        },
        {
          "name": "Using createCredential",
          "description": "Create a credential",
          "code": "# Call createCredential\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"n8n.createCredential\",\n    \"arguments\": {\n  \"body\": {\n    \"id\": \"example\",\n    \"name\": \"example\",\n    \"type\": \"example\",\n    \"data\": {},\n    \"createdAt\": \"example\",\n    \"updatedAt\": \"example\"\n  },\n  \"X-N8N-API-KEY\": \"example\"\n}\n  }\n}"
        },
        {
          "name": "Using deleteCredential",
          "description": "Delete credential by ID",
          "code": "# Call deleteCredential\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"n8n.deleteCredential\",\n    \"arguments\": {\n  \"id\": \"example\",\n  \"X-N8N-API-KEY\": \"example\"\n}\n  }\n}"
        }
      ]
    },
    "hostinger": {
      "service": "hostinger",
      "description": "Hostinger cloud hosting and domain management",
      "category": "hosting",
      "authentication": {
        "required": [
          "HOSTINGER_API_TOKEN"
        ],
        "type": "bearer"
      },
      "tools": [
        {
          "name": "billing_getCatalogItemListV1",
          "description": "Get catalog item list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "description": "Filter catalog items by category",
                "example": "VPS",
                "enum": [
                  "DOMAIN",
                  "VPS"
                ]
              },
              "name": {
                "type": "string",
                "description": "Filter catalog items by name. Use `*` for wildcard search, e.g. `.COM*` to find .com domain",
                "example": ".COM*"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/billing/v1/catalog",
          "category": "list",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_getCatalogItemListV1",
              "input": {
                "category": "VPS",
                "name": ".COM*",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "billing_createServiceOrderV1",
          "description": "Create service order",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "payment_method_id": {
                    "type": "integer",
                    "description": "Payment method ID",
                    "example": 517244
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "item_id": {
                          "type": "string",
                          "description": "Price Item ID",
                          "example": "hostingercom-vps-kvm2-usd-1m"
                        },
                        "quantity": {
                          "type": "integer",
                          "example": 1
                        }
                      },
                      "required": [
                        "item_id",
                        "quantity"
                      ]
                    }
                  },
                  "coupons": {
                    "type": "array",
                    "description": "Discount coupon codes",
                    "items": {
                      "type": "string",
                      "example": [
                        "Coupon 3"
                      ]
                    }
                  }
                },
                "required": [
                  "payment_method_id",
                  "items"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/billing/v1/orders",
          "category": "create",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_createServiceOrderV1",
              "input": {
                "body": {
                  "payment_method_id": 1,
                  "items": [
                    {
                      "item_id": "example",
                      "quantity": 1
                    }
                  ],
                  "coupons": [
                    null
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "billing_setDefaultPaymentMethodV1",
          "description": "Set default payment method",
          "inputSchema": {
            "type": "object",
            "properties": {
              "paymentMethodId": {
                "type": "integer",
                "description": "Payment method ID",
                "example": 9693613
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "paymentMethodId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/billing/v1/payment-methods/{paymentMethodId}",
          "category": "other",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_setDefaultPaymentMethodV1",
              "input": {
                "paymentMethodId": 9693613,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "billing_deletePaymentMethodV1",
          "description": "Delete payment method",
          "inputSchema": {
            "type": "object",
            "properties": {
              "paymentMethodId": {
                "type": "integer",
                "description": "Payment method ID",
                "example": 9693613
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "paymentMethodId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/billing/v1/payment-methods/{paymentMethodId}",
          "category": "delete",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_deletePaymentMethodV1",
              "input": {
                "paymentMethodId": 9693613,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "billing_getPaymentMethodListV1",
          "description": "Get payment method list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/billing/v1/payment-methods",
          "category": "list",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_getPaymentMethodListV1",
              "input": {
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "billing_cancelSubscriptionV1",
          "description": "Cancel subscription",
          "inputSchema": {
            "type": "object",
            "properties": {
              "subscriptionId": {
                "type": "string",
                "description": "Subscription ID",
                "example": "Cxy353Uhl1xC54pG6"
              },
              "body": {
                "type": "object",
                "properties": {
                  "reason_code": {
                    "type": "string",
                    "description": "Cancellation reason code",
                    "example": "other",
                    "enum": [
                      "other"
                    ]
                  },
                  "cancel_option": {
                    "type": "string",
                    "description": "Cancellation option",
                    "example": "immediately",
                    "enum": [
                      "immediately"
                    ]
                  }
                }
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "subscriptionId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/billing/v1/subscriptions/{subscriptionId}",
          "category": "other",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_cancelSubscriptionV1",
              "input": {
                "subscriptionId": "Cxy353Uhl1xC54pG6",
                "body": {
                  "reason_code": "other",
                  "cancel_option": "immediately"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "billing_getSubscriptionListV1",
          "description": "Get subscription list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/billing/v1/subscriptions",
          "category": "list",
          "tags": [
            "billing",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using billing_getSubscriptionListV1",
              "input": {
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_getDNSSnapshotV1",
          "description": "Get DNS snapshot",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "snapshotId": {
                "type": "integer",
                "description": "Snapshot ID",
                "example": 53513053
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "snapshotId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/dns/v1/snapshots/{domain}/{snapshotId}",
          "category": "list",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_getDNSSnapshotV1",
              "input": {
                "domain": "mydomain.tld",
                "snapshotId": 53513053,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_getDNSSnapshotListV1",
          "description": "Get DNS snapshot list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/dns/v1/snapshots/{domain}",
          "category": "list",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_getDNSSnapshotListV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_restoreDNSSnapshotV1",
          "description": "Restore DNS snapshot",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "snapshotId": {
                "type": "integer",
                "description": "Snapshot ID",
                "example": 53513053
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "snapshotId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/dns/v1/snapshots/{domain}/{snapshotId}/restore",
          "category": "other",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_restoreDNSSnapshotV1",
              "input": {
                "domain": "mydomain.tld",
                "snapshotId": 53513053,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_getDNSRecordsV1",
          "description": "Get DNS records",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/dns/v1/zones/{domain}",
          "category": "list",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_getDNSRecordsV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_updateDNSRecordsV1",
          "description": "Update DNS records",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "body": {
                "type": "object",
                "properties": {
                  "overwrite": {
                    "type": "boolean",
                    "description": "If `true`, resource records (RRs) matching name and type will be deleted and new RRs will be created, otherwise resource records' ttl's are updated and new records are appended. If no matching RRs are found, they are created.",
                    "example": true,
                    "default": true
                  },
                  "zone": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the record (use `@` for wildcard name)",
                          "example": "www"
                        },
                        "records": {
                          "type": "array",
                          "description": "Records assigned to the name",
                          "items": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "type": "string",
                                "description": "Content of the name record",
                                "example": "mydomain.tld."
                              }
                            },
                            "required": [
                              "content"
                            ]
                          }
                        },
                        "ttl": {
                          "type": "integer",
                          "description": "TTL (Time-To-Live) of the record",
                          "example": 14400
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of the record",
                          "example": "A",
                          "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "ALIAS",
                            "MX",
                            "TXT",
                            "NS",
                            "SOA",
                            "SRV",
                            "CAA"
                          ]
                        }
                      },
                      "required": [
                        "name",
                        "records",
                        "type"
                      ]
                    }
                  }
                },
                "required": [
                  "zone"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/dns/v1/zones/{domain}",
          "category": "update",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_updateDNSRecordsV1",
              "input": {
                "domain": "mydomain.tld",
                "body": {
                  "overwrite": true,
                  "zone": [
                    {
                      "name": "example",
                      "records": [
                        {
                          "content": "example"
                        }
                      ],
                      "ttl": 1,
                      "type": "A"
                    }
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_deleteDNSRecordsV1",
          "description": "Delete DNS records",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "body": {
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "array",
                    "description": "Filter records for deletion",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the record",
                          "example": "@"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of the record",
                          "example": "A",
                          "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "ALIAS",
                            "MX",
                            "TXT",
                            "NS",
                            "SOA",
                            "SRV",
                            "CAA"
                          ]
                        }
                      },
                      "required": [
                        "name",
                        "type"
                      ]
                    }
                  }
                },
                "required": [
                  "filters"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/dns/v1/zones/{domain}",
          "category": "delete",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_deleteDNSRecordsV1",
              "input": {
                "domain": "mydomain.tld",
                "body": {
                  "filters": [
                    {
                      "name": "example",
                      "type": "A"
                    }
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_resetDNSRecordsV1",
          "description": "Reset DNS records",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "body": {
                "type": "object",
                "properties": {
                  "sync": {
                    "type": "boolean",
                    "description": "Determines if operation should be run synchronously",
                    "example": true,
                    "default": true
                  },
                  "reset_email_records": {
                    "type": "boolean",
                    "description": "Determines if email records should be reset",
                    "example": true,
                    "default": true
                  },
                  "whitelisted_record_types": {
                    "type": "array",
                    "description": "Specifies which record types to not reset",
                    "example": [
                      "MX",
                      "TXT"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/dns/v1/zones/{domain}/reset",
          "category": "other",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_resetDNSRecordsV1",
              "input": {
                "domain": "mydomain.tld",
                "body": {
                  "sync": true,
                  "reset_email_records": true,
                  "whitelisted_record_types": [
                    "example"
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "DNS_validateDNSRecordsV1",
          "description": "Validate DNS records",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "body": {
                "type": "object",
                "properties": {
                  "overwrite": {
                    "type": "boolean",
                    "description": "If `true`, resource records (RRs) matching name and type will be deleted and new RRs will be created, otherwise resource records' ttl's are updated and new records are appended. If no matching RRs are found, they are created.",
                    "example": true,
                    "default": true
                  },
                  "zone": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the record (use `@` for wildcard name)",
                          "example": "www"
                        },
                        "records": {
                          "type": "array",
                          "description": "Records assigned to the name",
                          "items": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "type": "string",
                                "description": "Content of the name record",
                                "example": "mydomain.tld."
                              }
                            },
                            "required": [
                              "content"
                            ]
                          }
                        },
                        "ttl": {
                          "type": "integer",
                          "description": "TTL (Time-To-Live) of the record",
                          "example": 14400
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of the record",
                          "example": "A",
                          "enum": [
                            "A",
                            "AAAA",
                            "CNAME",
                            "ALIAS",
                            "MX",
                            "TXT",
                            "NS",
                            "SOA",
                            "SRV",
                            "CAA"
                          ]
                        }
                      },
                      "required": [
                        "name",
                        "records",
                        "type"
                      ]
                    }
                  }
                },
                "required": [
                  "zone"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/dns/v1/zones/{domain}/validate",
          "category": "other",
          "tags": [
            "DNS",
            "api",
            "dns"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using DNS_validateDNSRecordsV1",
              "input": {
                "domain": "mydomain.tld",
                "body": {
                  "overwrite": true,
                  "zone": [
                    {
                      "name": "example",
                      "records": [
                        {
                          "content": "example"
                        }
                      ],
                      "ttl": 1,
                      "type": "A"
                    }
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_checkDomainAvailabilityV1",
          "description": "Check domain availability",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Domain name (without TLD)",
                    "example": "mydomain"
                  },
                  "tlds": {
                    "type": "array",
                    "description": "TLDs list",
                    "example": [
                      "com",
                      "net",
                      "org"
                    ],
                    "items": {
                      "type": "string",
                      "description": "TLD without leading dot"
                    }
                  },
                  "with_alternatives": {
                    "type": "boolean",
                    "description": "Should response include alternatives",
                    "example": true
                  }
                },
                "required": [
                  "domain",
                  "tlds"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/domains/v1/availability",
          "category": "monitor",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_checkDomainAvailabilityV1",
              "input": {
                "body": {
                  "domain": "example",
                  "tlds": [
                    "example"
                  ],
                  "with_alternatives": true
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_getDomainForwardingV1",
          "description": "Get domain forwarding",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/domains/v1/forwarding/{domain}",
          "category": "list",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_getDomainForwardingV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_deleteDomainForwardingV1",
          "description": "Delete domain forwarding",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/domains/v1/forwarding/{domain}",
          "category": "delete",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_deleteDomainForwardingV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_createDomainForwardingV1",
          "description": "Create domain forwarding",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Domain name",
                    "example": "mydomain.tld"
                  },
                  "redirect_type": {
                    "type": "string",
                    "description": "Redirect type",
                    "example": "301",
                    "enum": [
                      "301",
                      "302"
                    ]
                  },
                  "redirect_url": {
                    "type": "string",
                    "description": "URL to forward domain to",
                    "example": "https://forward.to.my.url"
                  }
                },
                "required": [
                  "domain",
                  "redirect_type",
                  "redirect_url"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/domains/v1/forwarding",
          "category": "create",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_createDomainForwardingV1",
              "input": {
                "body": {
                  "domain": "example",
                  "redirect_type": "301",
                  "redirect_url": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_enableDomainLockV1",
          "description": "Enable domain lock",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/domains/v1/portfolio/{domain}/domain-lock",
          "category": "other",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_enableDomainLockV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_disableDomainLockV1",
          "description": "Disable domain lock",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/domains/v1/portfolio/{domain}/domain-lock",
          "category": "other",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_disableDomainLockV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_getDomainDetailsV1",
          "description": "Get domain details",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/domains/v1/portfolio/{domain}",
          "category": "list",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_getDomainDetailsV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_getDomainListV1",
          "description": "Get domain list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/domains/v1/portfolio",
          "category": "list",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_getDomainListV1",
              "input": {
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_purchaseNewDomainV1",
          "description": "Purchase new domain",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Domain name",
                    "example": "my-new-domain.tld"
                  },
                  "item_id": {
                    "type": "string",
                    "description": "Catalog price item ID",
                    "example": "hostingercom-domain-com-usd-1y"
                  },
                  "payment_method_id": {
                    "type": "integer",
                    "description": "Payment method ID, default will be used if not provided",
                    "example": 1327362
                  },
                  "domain_contacts": {
                    "type": "object",
                    "description": "Domain contact information",
                    "properties": {
                      "owner_id": {
                        "type": "integer",
                        "description": "Owner contact WHOIS record ID",
                        "example": 741288
                      },
                      "admin_id": {
                        "type": "integer",
                        "description": "Administrative contact WHOIS record ID",
                        "example": 546123
                      },
                      "billing_id": {
                        "type": "integer",
                        "description": "Billing contact WHOIS record ID",
                        "example": 741288
                      },
                      "tech_id": {
                        "type": "integer",
                        "description": "Technical contact WHOIS record ID",
                        "example": 741288
                      }
                    }
                  },
                  "additional_details": {
                    "type": "object",
                    "description": "Additional registration data, possible values depends on TLD"
                  },
                  "coupons": {
                    "type": "array",
                    "description": "Discount coupon codes",
                    "items": {
                      "type": "string",
                      "example": [
                        "Coupon 3"
                      ]
                    }
                  }
                },
                "required": [
                  "domain",
                  "item_id"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/domains/v1/portfolio",
          "category": "create",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_purchaseNewDomainV1",
              "input": {
                "body": {
                  "domain": "example",
                  "item_id": "example",
                  "payment_method_id": 1,
                  "domain_contacts": {
                    "owner_id": 1,
                    "admin_id": 1,
                    "billing_id": 1,
                    "tech_id": 1
                  },
                  "additional_details": {},
                  "coupons": [
                    null
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_enablePrivacyProtectionV1",
          "description": "Enable privacy protection",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/domains/v1/portfolio/{domain}/privacy-protection",
          "category": "other",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_enablePrivacyProtectionV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_disablePrivacyProtectionV1",
          "description": "Disable privacy protection",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/domains/v1/portfolio/{domain}/privacy-protection",
          "category": "other",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_disablePrivacyProtectionV1",
              "input": {
                "domain": "mydomain.tld",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_updateDomainNameserversV1",
          "description": "Update domain nameservers",
          "inputSchema": {
            "type": "object",
            "properties": {
              "domain": {
                "type": "string",
                "description": "Domain name",
                "example": "mydomain.tld"
              },
              "body": {
                "type": "object",
                "properties": {
                  "ns1": {
                    "type": "string",
                    "description": "First name server",
                    "example": "ns1.some-nameserver.tld"
                  },
                  "ns2": {
                    "type": "string",
                    "description": "Second name server",
                    "example": "ns2.some-nameserver.tld"
                  },
                  "ns3": {
                    "type": "string",
                    "description": "Third name server",
                    "example": "ns3.some-nameserver.tld"
                  },
                  "ns4": {
                    "type": "string",
                    "description": "Fourth name server",
                    "example": "ns4.some-nameserver.tld"
                  }
                },
                "required": [
                  "ns1",
                  "ns2"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "domain",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/domains/v1/portfolio/{domain}/nameservers",
          "category": "update",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_updateDomainNameserversV1",
              "input": {
                "domain": "mydomain.tld",
                "body": {
                  "ns1": "example",
                  "ns2": "example",
                  "ns3": "example",
                  "ns4": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_getWHOISProfileV1",
          "description": "Get WHOIS profile",
          "inputSchema": {
            "type": "object",
            "properties": {
              "whoisId": {
                "type": "integer",
                "description": "WHOIS ID",
                "example": 564651
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "whoisId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/domains/v1/whois/{whoisId}",
          "category": "list",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_getWHOISProfileV1",
              "input": {
                "whoisId": 564651,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_deleteWHOISProfileV1",
          "description": "Delete WHOIS profile",
          "inputSchema": {
            "type": "object",
            "properties": {
              "whoisId": {
                "type": "integer",
                "description": "WHOIS ID",
                "example": 564651
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "whoisId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/domains/v1/whois/{whoisId}",
          "category": "delete",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_deleteWHOISProfileV1",
              "input": {
                "whoisId": 564651,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_getWHOISProfileListV1",
          "description": "Get WHOIS profile list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "tld": {
                "type": "string",
                "description": "Filter by TLD (without leading dot)",
                "example": "com"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/domains/v1/whois",
          "category": "list",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_getWHOISProfileListV1",
              "input": {
                "tld": "com",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_createWHOISProfileV1",
          "description": "Create WHOIS profile",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "tld": {
                    "type": "string",
                    "description": "TLD of the domain (without leading dot)",
                    "example": "com"
                  },
                  "country": {
                    "type": "string",
                    "description": "ISO 3166 2-letter country code",
                    "example": "NL"
                  },
                  "entity_type": {
                    "type": "string",
                    "description": "Legal entity type",
                    "example": "individual",
                    "enum": [
                      "individual",
                      "organization"
                    ]
                  },
                  "tld_details": {
                    "type": "object",
                    "description": "TLD details"
                  },
                  "whois_details": {
                    "type": "object",
                    "description": "WHOIS details"
                  }
                },
                "required": [
                  "tld",
                  "entity_type",
                  "country",
                  "whois_details"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/domains/v1/whois",
          "category": "create",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_createWHOISProfileV1",
              "input": {
                "body": {
                  "tld": "example",
                  "country": "example",
                  "entity_type": "individual",
                  "tld_details": {},
                  "whois_details": {}
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "domains_getWHOISProfileUsageV1",
          "description": "Get WHOIS profile usage",
          "inputSchema": {
            "type": "object",
            "properties": {
              "whoisId": {
                "type": "integer",
                "description": "WHOIS ID",
                "example": 564651
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "whoisId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/domains/v1/whois/{whoisId}/usage",
          "category": "list",
          "tags": [
            "domains",
            "api"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using domains_getWHOISProfileUsageV1",
              "input": {
                "whoisId": 564651,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getDataCenterListV1",
          "description": "Get data center list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/data-centers",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getDataCenterListV1",
              "input": {
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getProjectContainersV1",
          "description": "Get project containers",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/containers",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getProjectContainersV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getProjectContentsV1",
          "description": "Get project contents",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getProjectContentsV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deleteProjectV1",
          "description": "Delete project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/down",
          "category": "delete",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deleteProjectV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getProjectListV1",
          "description": "Get project list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getProjectListV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createNewProjectV1",
          "description": "Create new project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "project_name": {
                    "type": "string",
                    "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                    "example": "my-project-1",
                    "minLength": 3,
                    "maxLength": 64
                  },
                  "content": {
                    "type": "string",
                    "description": "URL pointing to docker-compose.yaml file, Github repository or raw YAML content of the compose file",
                    "maxLength": 8192
                  }
                },
                "required": [
                  "project_name",
                  "content"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createNewProjectV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "project_name": "example",
                  "content": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getProjectLogsV1",
          "description": "Get project logs",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/logs",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getProjectLogsV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_restartProjectV1",
          "description": "Restart project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/restart",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_restartProjectV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_startProjectV1",
          "description": "Start project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/start",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_startProjectV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_stopProjectV1",
          "description": "Stop project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/stop",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_stopProjectV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_updateProjectV1",
          "description": "Update project",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "projectName": {
                "type": "string",
                "description": "Docker Compose project name using alphanumeric characters, dashes, and underscores only",
                "example": "my-docker-project",
                "minLength": 3,
                "maxLength": 64
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "projectName",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/docker/{projectName}/update",
          "category": "update",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_updateProjectV1",
              "input": {
                "virtualMachineId": 1268054,
                "projectName": "my-docker-project",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_activateFirewallV1",
          "description": "Activate firewall",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}/activate/{virtualMachineId}",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_activateFirewallV1",
              "input": {
                "firewallId": 9449049,
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deactivateFirewallV1",
          "description": "Deactivate firewall",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}/deactivate/{virtualMachineId}",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deactivateFirewallV1",
              "input": {
                "firewallId": 9449049,
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getFirewallDetailsV1",
          "description": "Get firewall details",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getFirewallDetailsV1",
              "input": {
                "firewallId": 9449049,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deleteFirewallV1",
          "description": "Delete firewall",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}",
          "category": "delete",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deleteFirewallV1",
              "input": {
                "firewallId": 9449049,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getFirewallListV1",
          "description": "Get firewall list",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Page number",
                "example": 1
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "List of items"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/firewall",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getFirewallListV1",
              "input": {
                "page": 1,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": [
                  {
                    "id": "1",
                    "name": "Example item"
                  }
                ],
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createNewFirewallV1",
          "description": "Create new firewall",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "My Firewall Group"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/firewall",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createNewFirewallV1",
              "input": {
                "body": {
                  "name": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_updateFirewallRuleV1",
          "description": "Update firewall rule",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "ruleId": {
                "type": "integer",
                "description": "Firewall Rule ID",
                "example": 8941182
              },
              "body": {
                "type": "object",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "example": "TCP",
                    "enum": [
                      "TCP",
                      "UDP",
                      "ICMP",
                      "GRE",
                      "any",
                      "ESP",
                      "AH",
                      "ICMPv6",
                      "SSH",
                      "HTTP",
                      "HTTPS",
                      "MySQL",
                      "PostgreSQL"
                    ]
                  },
                  "port": {
                    "type": "string",
                    "description": "Port or port range, ex: 1024:2048",
                    "example": "443"
                  },
                  "source": {
                    "type": "string",
                    "example": "any",
                    "enum": [
                      "any",
                      "custom"
                    ]
                  },
                  "source_detail": {
                    "type": "string",
                    "description": "IP range, CIDR, single IP or `any`",
                    "example": "351.15.24.0/24"
                  }
                },
                "required": [
                  "protocol",
                  "port",
                  "source",
                  "source_detail"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "ruleId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}/rules/{ruleId}",
          "category": "update",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_updateFirewallRuleV1",
              "input": {
                "firewallId": 9449049,
                "ruleId": 8941182,
                "body": {
                  "protocol": "TCP",
                  "port": "example",
                  "source": "any",
                  "source_detail": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deleteFirewallRuleV1",
          "description": "Delete firewall rule",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "ruleId": {
                "type": "integer",
                "description": "Firewall Rule ID",
                "example": 8941182
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "ruleId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}/rules/{ruleId}",
          "category": "delete",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deleteFirewallRuleV1",
              "input": {
                "firewallId": 9449049,
                "ruleId": 8941182,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createFirewallRuleV1",
          "description": "Create firewall rule",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "body": {
                "type": "object",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "example": "TCP",
                    "enum": [
                      "TCP",
                      "UDP",
                      "ICMP",
                      "GRE",
                      "any",
                      "ESP",
                      "AH",
                      "ICMPv6",
                      "SSH",
                      "HTTP",
                      "HTTPS",
                      "MySQL",
                      "PostgreSQL"
                    ]
                  },
                  "port": {
                    "type": "string",
                    "description": "Port or port range, ex: 1024:2048",
                    "example": "443"
                  },
                  "source": {
                    "type": "string",
                    "example": "any",
                    "enum": [
                      "any",
                      "custom"
                    ]
                  },
                  "source_detail": {
                    "type": "string",
                    "description": "IP range, CIDR, single IP or `any`",
                    "example": "351.15.24.0/24"
                  }
                },
                "required": [
                  "protocol",
                  "port",
                  "source",
                  "source_detail"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}/rules",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createFirewallRuleV1",
              "input": {
                "firewallId": 9449049,
                "body": {
                  "protocol": "TCP",
                  "port": "example",
                  "source": "any",
                  "source_detail": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_syncFirewallV1",
          "description": "Sync firewall",
          "inputSchema": {
            "type": "object",
            "properties": {
              "firewallId": {
                "type": "integer",
                "description": "Firewall ID",
                "example": 9449049
              },
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "firewallId",
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/firewall/{firewallId}/sync/{virtualMachineId}",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_syncFirewallV1",
              "input": {
                "firewallId": 9449049,
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getPostInstallScriptV1",
          "description": "Get post-install script",
          "inputSchema": {
            "type": "object",
            "properties": {
              "postInstallScriptId": {
                "type": "integer",
                "description": "Post-install script ID",
                "example": 9568314
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "postInstallScriptId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/post-install-scripts/{postInstallScriptId}",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getPostInstallScriptV1",
              "input": {
                "postInstallScriptId": 9568314,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_updatePostInstallScriptV1",
          "description": "Update post-install script",
          "inputSchema": {
            "type": "object",
            "properties": {
              "postInstallScriptId": {
                "type": "integer",
                "description": "Post-install script ID",
                "example": 9568314
              },
              "body": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the script",
                    "example": "My Script"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the script",
                    "example": "#!/bin/bash\n\necho 'Hello, World!'"
                  }
                },
                "required": [
                  "name",
                  "content"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "postInstallScriptId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/vps/v1/post-install-scripts/{postInstallScriptId}",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_updatePostInstallScriptV1",
              "input": {
                "postInstallScriptId": 9568314,
                "body": {
                  "name": "example",
                  "content": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deletePostInstallScriptV1",
          "description": "Delete post-install script",
          "inputSchema": {
            "type": "object",
            "properties": {
              "postInstallScriptId": {
                "type": "integer",
                "description": "Post-install script ID",
                "example": 9568314
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "postInstallScriptId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/post-install-scripts/{postInstallScriptId}",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deletePostInstallScriptV1",
              "input": {
                "postInstallScriptId": 9568314,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getPostInstallScriptsV1",
          "description": "Get post-install scripts",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Page number",
                "example": 1
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/post-install-scripts",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getPostInstallScriptsV1",
              "input": {
                "page": 1,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createPostInstallScriptV1",
          "description": "Create post-install script",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the script",
                    "example": "My Script"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the script",
                    "example": "#!/bin/bash\n\necho 'Hello, World!'"
                  }
                },
                "required": [
                  "name",
                  "content"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/post-install-scripts",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createPostInstallScriptV1",
              "input": {
                "body": {
                  "name": "example",
                  "content": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_attachPublicKeyV1",
          "description": "Attach public key",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "description": "Public Key IDs to attach",
                    "example": [
                      18232,
                      10230230
                    ],
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "ids"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/public-keys/attach/{virtualMachineId}",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_attachPublicKeyV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "ids": [
                    1
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deletePublicKeyV1",
          "description": "Delete public key",
          "inputSchema": {
            "type": "object",
            "properties": {
              "publicKeyId": {
                "type": "integer",
                "description": "Public Key ID",
                "example": 6672861
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "publicKeyId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/public-keys/{publicKeyId}",
          "category": "delete",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deletePublicKeyV1",
              "input": {
                "publicKeyId": 6672861,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getPublicKeysV1",
          "description": "Get public keys",
          "inputSchema": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Page number",
                "example": 1
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/public-keys",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getPublicKeysV1",
              "input": {
                "page": 1,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createPublicKeyV1",
          "description": "Create public key",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "My Public Key"
                  },
                  "key": {
                    "type": "string",
                    "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD..."
                  }
                },
                "required": [
                  "name",
                  "key"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/public-keys",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createPublicKeyV1",
              "input": {
                "body": {
                  "name": "example",
                  "key": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getTemplateDetailsV1",
          "description": "Get template details",
          "inputSchema": {
            "type": "object",
            "properties": {
              "templateId": {
                "type": "integer",
                "description": "Template ID",
                "example": 2868928
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "templateId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/templates/{templateId}",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getTemplateDetailsV1",
              "input": {
                "templateId": 2868928,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getTemplatesV1",
          "description": "Get templates",
          "inputSchema": {
            "type": "object",
            "properties": {
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/templates",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getTemplatesV1",
              "input": {
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getActionDetailsV1",
          "description": "Get action details",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "actionId": {
                "type": "integer",
                "description": "Action ID",
                "example": 8123712
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "actionId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/actions/{actionId}",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getActionDetailsV1",
              "input": {
                "virtualMachineId": 1268054,
                "actionId": 8123712,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getActionsV1",
          "description": "Get actions",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "page": {
                "type": "integer",
                "description": "Page number",
                "example": 1
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/actions",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getActionsV1",
              "input": {
                "virtualMachineId": 1268054,
                "page": 1,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getAttachedPublicKeysV1",
          "description": "Get attached public keys",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "page": {
                "type": "integer",
                "description": "Page number",
                "example": 1
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/public-keys",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getAttachedPublicKeysV1",
              "input": {
                "virtualMachineId": 1268054,
                "page": 1,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getBackupsV1",
          "description": "Get backups",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "page": {
                "type": "integer",
                "description": "Page number",
                "example": 1
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/backups",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getBackupsV1",
              "input": {
                "virtualMachineId": 1268054,
                "page": 1,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_restoreBackupV1",
          "description": "Restore backup",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "backupId": {
                "type": "integer",
                "description": "Backup ID",
                "example": 8676502
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "backupId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/backups/{backupId}/restore",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_restoreBackupV1",
              "input": {
                "virtualMachineId": 1268054,
                "backupId": 8676502,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_setHostnameV1",
          "description": "Set hostname",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "type": "string",
                    "example": "my.server.tld"
                  }
                },
                "required": [
                  "hostname"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/hostname",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_setHostnameV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "hostname": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_resetHostnameV1",
          "description": "Reset hostname",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/hostname",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_resetHostnameV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getVirtualMachineDetailsV1",
          "description": "Get virtual machine details",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getVirtualMachineDetailsV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getVirtualMachinesV1",
          "description": "Get virtual machines",
          "inputSchema": {
            "type": "object",
            "properties": {
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getVirtualMachinesV1",
              "input": {
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_purchaseNewVirtualMachineV1",
          "description": "Purchase new virtual machine",
          "inputSchema": {
            "type": "object",
            "properties": {
              "body": {
                "type": "object",
                "properties": {
                  "item_id": {
                    "type": "string",
                    "description": "Catalog price item ID",
                    "example": "hostingercom-vps-kvm2-usd-1m"
                  },
                  "payment_method_id": {
                    "type": "integer",
                    "description": "Payment method ID, default will be used if not provided",
                    "example": 1327362
                  },
                  "setup": {
                    "type": "object",
                    "properties": {
                      "template_id": {
                        "type": "integer",
                        "description": "Template ID",
                        "example": 1130
                      },
                      "data_center_id": {
                        "type": "integer",
                        "description": "Data center ID",
                        "example": 19
                      },
                      "post_install_script_id": {
                        "type": "integer",
                        "description": "Post-install script ID",
                        "example": 6324
                      },
                      "password": {
                        "type": "string",
                        "description": "Password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.",
                        "example": "oMeNRustosIO",
                        "format": "password",
                        "minLength": 12
                      },
                      "hostname": {
                        "type": "string",
                        "description": "Override default hostname of the virtual machine",
                        "example": "my.server.tld"
                      },
                      "install_monarx": {
                        "type": "boolean",
                        "description": "Install Monarx malware scanner (if supported)"
                      },
                      "enable_backups": {
                        "type": "boolean",
                        "description": "Enable weekly backup schedule",
                        "example": true,
                        "default": true
                      },
                      "ns1": {
                        "type": "string",
                        "description": "Name server 1",
                        "example": "4.3.2.1"
                      },
                      "ns2": {
                        "type": "string",
                        "description": "Name server 2",
                        "example": "1.2.3.4"
                      },
                      "public_key": {
                        "type": "object",
                        "description": "Use SSH key",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the SSH key",
                            "example": "my-key"
                          },
                          "key": {
                            "type": "string",
                            "description": "Contents of the SSH key",
                            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2X..."
                          }
                        }
                      }
                    },
                    "required": [
                      "data_center_id",
                      "template_id"
                    ]
                  },
                  "coupons": {
                    "type": "array",
                    "description": "Discount coupon codes",
                    "items": {
                      "type": "string",
                      "example": [
                        "Coupon 3"
                      ]
                    }
                  }
                },
                "required": [
                  "item_id",
                  "setup"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_purchaseNewVirtualMachineV1",
              "input": {
                "body": {
                  "item_id": "example",
                  "payment_method_id": 1,
                  "setup": {
                    "template_id": 1,
                    "data_center_id": 1,
                    "post_install_script_id": 1,
                    "password": "example",
                    "hostname": "example",
                    "install_monarx": true,
                    "enable_backups": true,
                    "ns1": "example",
                    "ns2": "example",
                    "public_key": {
                      "name": "example",
                      "key": "example"
                    }
                  },
                  "coupons": [
                    null
                  ]
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getScanMetricsV1",
          "description": "Get scan metrics",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/monarx",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getScanMetricsV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_installMonarxV1",
          "description": "Install Monarx",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/monarx",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_installMonarxV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_uninstallMonarxV1",
          "description": "Uninstall Monarx",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/monarx",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_uninstallMonarxV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getMetricsV1",
          "description": "Get metrics",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "date_from": {
                "type": "string",
                "example": "2025-05-01T00:00:00Z",
                "format": "date-time"
              },
              "date_to": {
                "type": "string",
                "example": "2025-06-01T00:00:00Z",
                "format": "date-time"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "date_from",
              "date_to",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/metrics",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getMetricsV1",
              "input": {
                "virtualMachineId": 1268054,
                "date_from": "2025-05-01T00:00:00Z",
                "date_to": "2025-06-01T00:00:00Z",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_setNameserversV1",
          "description": "Set nameservers",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "ns1": {
                    "type": "string",
                    "example": "4.3.2.1"
                  },
                  "ns2": {
                    "type": "string",
                    "example": "1.2.3.4"
                  },
                  "ns3": {
                    "type": "string",
                    "example": "5.2.3.4"
                  }
                },
                "required": [
                  "ns1"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/nameservers",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_setNameserversV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "ns1": "example",
                  "ns2": "example",
                  "ns3": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createPTRRecordV1",
          "description": "Create PTR record",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "ipAddressId": {
                "type": "integer",
                "description": "IP Address ID",
                "example": 246547
              },
              "body": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Pointer record domain",
                    "example": "example.tld"
                  }
                },
                "required": [
                  "domain"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "ipAddressId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/ptr/{ipAddressId}",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createPTRRecordV1",
              "input": {
                "virtualMachineId": 1268054,
                "ipAddressId": 246547,
                "body": {
                  "domain": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deletePTRRecordV1",
          "description": "Delete PTR record",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "ipAddressId": {
                "type": "integer",
                "description": "IP Address ID",
                "example": 246547
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "ipAddressId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/ptr/{ipAddressId}",
          "category": "delete",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deletePTRRecordV1",
              "input": {
                "virtualMachineId": 1268054,
                "ipAddressId": 246547,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_setPanelPasswordV1",
          "description": "Set panel password",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Panel password for the virtual machine",
                    "example": "oMeNRustosIO",
                    "format": "password",
                    "minLength": 8
                  }
                },
                "required": [
                  "password"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/panel-password",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_setPanelPasswordV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "password": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_startRecoveryModeV1",
          "description": "Start recovery mode",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "root_password": {
                    "type": "string",
                    "description": "Temporary root password for recovery mode",
                    "example": "oMeNRustosIO"
                  }
                },
                "required": [
                  "root_password"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/recovery",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_startRecoveryModeV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "root_password": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_stopRecoveryModeV1",
          "description": "Stop recovery mode",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/recovery",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_stopRecoveryModeV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_recreateVirtualMachineV1",
          "description": "Recreate virtual machine",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "integer",
                    "description": "Template ID",
                    "example": 1130
                  },
                  "password": {
                    "type": "string",
                    "description": "Root password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.",
                    "example": "oMeNRustosIO",
                    "format": "password",
                    "minLength": 12
                  },
                  "panel_password": {
                    "type": "string",
                    "description": "Panel password for the panel-based OS template. If not provided, random password will be generated. If OS does not support panel_password this field will be ignored. Password will not be shown in the response.",
                    "example": "Mna58c17a4d",
                    "format": "password",
                    "minLength": 12
                  },
                  "post_install_script_id": {
                    "type": "integer",
                    "description": "Post-install script to execute after virtual machine was recreated",
                    "example": 6324
                  }
                },
                "required": [
                  "template_id"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/recreate",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_recreateVirtualMachineV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "template_id": 1,
                  "password": "example",
                  "panel_password": "example",
                  "post_install_script_id": 1
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_restartVirtualMachineV1",
          "description": "Restart virtual machine",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/restart",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_restartVirtualMachineV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_setRootPasswordV1",
          "description": "Set root password",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Root password for the virtual machine",
                    "example": "oMeNRustosIO",
                    "format": "password",
                    "minLength": 12
                  }
                },
                "required": [
                  "password"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "PUT",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/root-password",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_setRootPasswordV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "password": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_setupPurchasedVirtualMachineV1",
          "description": "Setup purchased virtual machine",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "body": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "integer",
                    "description": "Template ID",
                    "example": 1130
                  },
                  "data_center_id": {
                    "type": "integer",
                    "description": "Data center ID",
                    "example": 19
                  },
                  "post_install_script_id": {
                    "type": "integer",
                    "description": "Post-install script ID",
                    "example": 6324
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.",
                    "example": "oMeNRustosIO",
                    "format": "password",
                    "minLength": 12
                  },
                  "hostname": {
                    "type": "string",
                    "description": "Override default hostname of the virtual machine",
                    "example": "my.server.tld"
                  },
                  "install_monarx": {
                    "type": "boolean",
                    "description": "Install Monarx malware scanner (if supported)"
                  },
                  "enable_backups": {
                    "type": "boolean",
                    "description": "Enable weekly backup schedule",
                    "example": true,
                    "default": true
                  },
                  "ns1": {
                    "type": "string",
                    "description": "Name server 1",
                    "example": "4.3.2.1"
                  },
                  "ns2": {
                    "type": "string",
                    "description": "Name server 2",
                    "example": "1.2.3.4"
                  },
                  "public_key": {
                    "type": "object",
                    "description": "Use SSH key",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the SSH key",
                        "example": "my-key"
                      },
                      "key": {
                        "type": "string",
                        "description": "Contents of the SSH key",
                        "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2X..."
                      }
                    }
                  }
                },
                "required": [
                  "data_center_id",
                  "template_id"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/setup",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_setupPurchasedVirtualMachineV1",
              "input": {
                "virtualMachineId": 1268054,
                "body": {
                  "template_id": 1,
                  "data_center_id": 1,
                  "post_install_script_id": 1,
                  "password": "example",
                  "hostname": "example",
                  "install_monarx": true,
                  "enable_backups": true,
                  "ns1": "example",
                  "ns2": "example",
                  "public_key": {
                    "name": "example",
                    "key": "example"
                  }
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_getSnapshotV1",
          "description": "Get snapshot",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/snapshot",
          "category": "list",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_getSnapshotV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_createSnapshotV1",
          "description": "Create snapshot",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/snapshot",
          "category": "create",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_createSnapshotV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_deleteSnapshotV1",
          "description": "Delete snapshot",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "DELETE",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/snapshot",
          "category": "delete",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_deleteSnapshotV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_restoreSnapshotV1",
          "description": "Restore snapshot",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/snapshot/restore",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_restoreSnapshotV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_startVirtualMachineV1",
          "description": "Start virtual machine",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/start",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_startVirtualMachineV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "VPS_stopVirtualMachineV1",
          "description": "Stop virtual machine",
          "inputSchema": {
            "type": "object",
            "properties": {
              "virtualMachineId": {
                "type": "integer",
                "description": "Virtual Machine ID",
                "example": 1268054
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for apiToken"
              }
            },
            "required": [
              "virtualMachineId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/api/vps/v1/virtual-machines/{virtualMachineId}/stop",
          "category": "other",
          "tags": [
            "VPS",
            "api",
            "vps"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using VPS_stopVirtualMachineV1",
              "input": {
                "virtualMachineId": 1268054,
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        }
      ],
      "toolCount": 94,
      "generatedAt": "2025-08-30T00:05:06.799Z",
      "version": "1.6.4",
      "examples": [
        {
          "name": "Service Connection",
          "description": "How to connect to hostinger",
          "code": "# Environment setup\nHOSTINGER_API_TOKEN=your_hostinger_api_token\n\n# Start MCP server\nnode examples/mcp-hostinger-server.js\n\n# Or use multi-host\nnode examples/mcp-multi-host.js --config services.json"
        },
        {
          "name": "Using billing_getCatalogItemListV1",
          "description": "Get catalog item list",
          "code": "# Call billing_getCatalogItemListV1\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"hostinger.billing_getCatalogItemListV1\",\n    \"arguments\": {\n  \"category\": \"VPS\",\n  \"name\": \".COM*\",\n  \"bearerToken\": \"example\"\n}\n  }\n}"
        },
        {
          "name": "Using billing_createServiceOrderV1",
          "description": "Create service order",
          "code": "# Call billing_createServiceOrderV1\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"hostinger.billing_createServiceOrderV1\",\n    \"arguments\": {\n  \"body\": {\n    \"payment_method_id\": 1,\n    \"items\": [\n      {\n        \"item_id\": \"example\",\n        \"quantity\": 1\n      }\n    ],\n    \"coupons\": [\n      \"example\"\n    ]\n  },\n  \"bearerToken\": \"example\"\n}\n  }\n}"
        },
        {
          "name": "Using billing_setDefaultPaymentMethodV1",
          "description": "Set default payment method",
          "code": "# Call billing_setDefaultPaymentMethodV1\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"hostinger.billing_setDefaultPaymentMethodV1\",\n    \"arguments\": {\n  \"paymentMethodId\": 9693613,\n  \"bearerToken\": \"example\"\n}\n  }\n}"
        }
      ]
    },
    "adobe_pdf": {
      "service": "adobe_pdf",
      "description": "Adobe PDF Services for document processing",
      "category": "document-processing",
      "authentication": {
        "required": [
          "ADOBE_ACCESS_TOKEN"
        ],
        "type": "bearer"
      },
      "tools": [
        {
          "name": "createAsset",
          "description": "Create an asset placeholder for upload",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "body": {
                "type": "object",
                "properties": {
                  "mediaType": {
                    "type": "string",
                    "example": "application/pdf"
                  }
                }
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Created resource ID"
                  }
                }
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/assets",
          "category": "create",
          "tags": [
            "assets"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using createAsset",
              "input": {
                "x-api-key": "example",
                "body": {
                  "mediaType": "example"
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "combinePDF",
          "description": "Combine multiple PDF assets into one PDF",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "body": {
                "type": "object",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "assetID": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "options": {
                    "type": "object"
                  }
                },
                "required": [
                  "inputs"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/operation/combine-pdf",
          "category": "other",
          "tags": [
            "operation",
            "combine-pdf"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using combinePDF",
              "input": {
                "x-api-key": "example",
                "body": {
                  "inputs": [
                    {
                      "assetID": "example"
                    }
                  ],
                  "options": {}
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "ocrPDF",
          "description": "OCR a PDF asset",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "body": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "properties": {
                      "assetID": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/operation/ocr-pdf",
          "category": "other",
          "tags": [
            "operation",
            "ocr-pdf"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using ocrPDF",
              "input": {
                "x-api-key": "example",
                "body": {
                  "input": {
                    "assetID": "example"
                  }
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "protectPDF",
          "description": "Protect a PDF with a password",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "body": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "properties": {
                      "assetID": {
                        "type": "string"
                      }
                    }
                  },
                  "options": {
                    "type": "object"
                  }
                }
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/operation/protect-pdf",
          "category": "other",
          "tags": [
            "operation",
            "protect-pdf"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using protectPDF",
              "input": {
                "x-api-key": "example",
                "body": {
                  "input": {
                    "assetID": "example"
                  },
                  "options": {}
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "extractPDF",
          "description": "Extract content/structure from a PDF",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "body": {
                "type": "object",
                "properties": {
                  "input": {
                    "type": "object",
                    "properties": {
                      "assetID": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/operation/extract-pdf",
          "category": "other",
          "tags": [
            "operation",
            "extract-pdf"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using extractPDF",
              "input": {
                "x-api-key": "example",
                "body": {
                  "input": {
                    "assetID": "example"
                  }
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "documentGeneration",
          "description": "Generate PDF from template and JSON data",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "body": {
                "type": "object",
                "properties": {
                  "template": {
                    "type": "object",
                    "properties": {
                      "assetID": {
                        "type": "string"
                      }
                    }
                  },
                  "data": {
                    "type": "object"
                  }
                },
                "required": [
                  "template",
                  "data"
                ]
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "body",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "POST",
          "pathTemplate": "/operation/documentgeneration",
          "category": "other",
          "tags": [
            "operation",
            "documentgeneration"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using documentGeneration",
              "input": {
                "x-api-key": "example",
                "body": {
                  "template": {
                    "assetID": "example"
                  },
                  "data": {}
                },
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        },
        {
          "name": "getJob",
          "description": "Get job status and result location",
          "inputSchema": {
            "type": "object",
            "properties": {
              "x-api-key": {
                "type": "string"
              },
              "jobId": {
                "type": "string"
              },
              "bearerToken": {
                "type": "string",
                "description": "Bearer token for bearerAuth"
              }
            },
            "required": [
              "x-api-key",
              "jobId",
              "bearerToken"
            ]
          },
          "outputSchema": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Operation success status"
              },
              "data": {
                "type": "object",
                "description": "Response data"
              },
              "message": {
                "type": "string",
                "description": "Response message"
              }
            }
          },
          "method": "GET",
          "pathTemplate": "/jobs/{jobId}",
          "category": "list",
          "tags": [
            "jobs"
          ],
          "security": {
            "required": true,
            "schemes": [
              "bearer"
            ]
          },
          "examples": [
            {
              "name": "Basic usage",
              "description": "Basic example of using getJob",
              "input": {
                "x-api-key": "example",
                "jobId": "example",
                "bearerToken": "example"
              },
              "expectedOutput": {
                "success": true,
                "data": {
                  "id": "123",
                  "status": "completed"
                },
                "message": "Operation completed successfully"
              }
            },
            {
              "name": "Error handling",
              "description": "Example of error response",
              "input": {
                "invalid": "input"
              },
              "expectedOutput": {
                "success": false,
                "error": "Invalid input parameters",
                "code": 400
              }
            }
          ]
        }
      ],
      "toolCount": 7,
      "generatedAt": "2025-08-30T00:05:06.892Z",
      "version": "1.6.4",
      "examples": [
        {
          "name": "Service Connection",
          "description": "How to connect to adobe_pdf",
          "code": "# Environment setup\nADOBE_ACCESS_TOKEN=your_adobe_access_token\n\n# Start MCP server\nnode examples/mcp-adobe_pdf-server.js\n\n# Or use multi-host\nnode examples/mcp-multi-host.js --config services.json"
        },
        {
          "name": "Using createAsset",
          "description": "Create an asset placeholder for upload",
          "code": "# Call createAsset\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"adobe_pdf.createAsset\",\n    \"arguments\": {\n  \"x-api-key\": \"example\",\n  \"body\": {\n    \"mediaType\": \"example\"\n  },\n  \"bearerToken\": \"example\"\n}\n  }\n}"
        },
        {
          "name": "Using combinePDF",
          "description": "Combine multiple PDF assets into one PDF",
          "code": "# Call combinePDF\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"adobe_pdf.combinePDF\",\n    \"arguments\": {\n  \"x-api-key\": \"example\",\n  \"body\": {\n    \"inputs\": [\n      {\n        \"assetID\": \"example\"\n      }\n    ],\n    \"options\": {}\n  },\n  \"bearerToken\": \"example\"\n}\n  }\n}"
        },
        {
          "name": "Using ocrPDF",
          "description": "OCR a PDF asset",
          "code": "# Call ocrPDF\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"adobe_pdf.ocrPDF\",\n    \"arguments\": {\n  \"x-api-key\": \"example\",\n  \"body\": {\n    \"input\": {\n      \"assetID\": \"example\"\n    }\n  },\n  \"bearerToken\": \"example\"\n}\n  }\n}"
        }
      ]
    }
  },
  "stats": {
    "totalTools": 141,
    "totalServices": 3,
    "errors": [],
    "warnings": [
      {
        "service": "docker",
        "warning": "No tools found"
      }
    ]
  }
}